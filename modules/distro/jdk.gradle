import groovy.json.JsonSlurper

import java.nio.file.FileVisitResult

import static groovy.io.FileType.DIRECTORIES

apply from: 'shared.gradle'

def getBuildUnstable()
{
    if ( ext.targetBuildUnstable != null )
    {
        return ext.targetBuildUnstable
    }

    if ( project.hasProperty( 'buildUnstable' ) )
    {
        ext.targetBuildUnstable = Boolean.TRUE
    }
    else
    {
        ext.targetBuildUnstable = Boolean.FALSE
    }

    if ( ext.targetBuildUnstable )
    {
        println "Creating an additional unstable build."
    }

    println "Build unstable: ${ext.targetBuildUnstable}"
    return ext.targetBuildUnstable
}

def getJdkPackageFile()
{
    return ext.jdkPackageFile
}

def isUnstableBuild()
{
    return ( isGenericBuild() && getBuildUnstable() )
}

def findJdkHome( File f )
{
    def binDir = null
    f.traverse( type: DIRECTORIES, nameFilter: ~/bin/ ) {
        binDir = it
        return FileVisitResult.TERMINATE
    }
    if ( binDir == null )
    {
        throw new GradleException( 'Could not find JDK home directory in ' + f.absolutePath )
    }
    return binDir.getParentFile()
}

def getJdkDownloadUrl()
{
    def JdkInfoUrl = 'https://api.adoptopenjdk.net/v2/info/releases/openjdk11?'

    def params = [openjdk_impl: 'hotspot',
                  os          : getTargetOS().toString(),
                  arch        : 'x64',
                  release     : 'latest',
                  type        : getTargetType().toJdkString()]
    def infoUrl = JdkInfoUrl + params.collect { it }.join( '&' )
    println "Fetching JDK binary builds info from ${infoUrl}"

    def headers = [accept: 'application/json', 'user-agent': 'curl/7.58.0']
    def jsonText = ''
    try
    {
        jsonText = new URL( infoUrl ).getText( requestProperties: headers )
    }
    catch ( e )
    {
        throw new GradleException( 'Could not find JDK binary download URL: ' + infoUrl, e )
    }
    def json = new JsonSlurper().parseText( jsonText ) as Map

    if ( !( json['binaries'] && json['binaries'][0] ) )
    {
        throw new GradleException( 'Could not find JDK binary download URL: ' + json )
    }
    def binaryLink = json['binaries'][0]['binary_link']
    ext.jdkPackageFile = json['binaries'][0]['binary_name']
    return binaryLink
}

def targetArtifactId()
{
    return isGenericBuild() ? 'enonic-xp-generic' : ( 'enonic-xp-' + getTargetOS() + '-' + getTargetType() )
}

ext {
    targetBuildUnstable = null
    jdkPackageFile = ''
    getJdkPackageFile = this.&getJdkPackageFile
    getJdkDownloadUrl = this.&getJdkDownloadUrl
    isUnstableBuild = this.&isUnstableBuild
    targetArtifactId = this.&targetArtifactId
    findJdkHome = this.&findJdkHome
}
