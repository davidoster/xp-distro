enum TargetOS {
    WINDOWS( 'windows' ),
    LINUX( 'linux' ),
    MAC( 'mac' )

    String platform

    TargetOS( String value )
    {
        this.platform = value
    }

    String toString()
    {
        return this.platform
    }

    static TargetOS from( String value )
    {
        value = value == null ? '' : value.toLowerCase()

        if ( value.startsWith( 'windows' ) )
        {
            return WINDOWS
        }
        else if ( value.startsWith( 'linux' ) )
        {
            return LINUX
        }
        else if ( value.startsWith( 'mac' ) )
        {
            return MAC
        }
        else
        {
            return null
        }
    }
}

enum TargetType {
    SDK( 'sdk' ),
    SERVER( 'server' ),
    GENERIC( 'generic' )

    String type

    TargetType( String value )
    {
        this.type = value
    }

    String toString()
    {
        return this.type
    }

    String toJdkString()
    {
        if ( this == SDK )
        {
            return "jdk"
        }
        else if ( this == SERVER )
        {
            return "jre"
        }
        else
        {
            return "generic"
        }
    }

    static TargetType from( String value )
    {
        value = value == null ? '' : value.trim().toLowerCase()
        if ( value == 'sdk' )
        {
            return SDK
        }
        else if ( value == 'server' )
        {
            return SERVER
        }
        else if ( value == 'generic' )
        {
            return GENERIC
        }
        else
        {
            return null
        }
    }
}

// Pass command line parameter to specify target OS and build type. E.g.: gradlew build -Pos=mac -Ptype=jre
def getTargetOS()
{
    if ( ext.targetOS != null )
    {
        return ext.targetOS
    }

    def paramTargetOS = project.findProperty( 'os' )
    if ( paramTargetOS == 'current' || !project.hasProperty( 'os' ) )
    {
        ext.targetOS = TargetOS.from( System.getProperty( 'os.name' ) )
        println "Build target platform: ${ext.targetOS}"
    }
    else
    {
        ext.targetOS = TargetOS.from( paramTargetOS as String )
        if ( ext.targetOS == null )
        {
            throw new GradleException( 'Build target OS not supported: ' + paramTargetOS )
        }
        println "Build target OS: ${ext.targetOS}"
    }

    return ext.targetOS
}

def getTargetType()
{
    if ( ext.targetType != null )
    {
        return ext.targetType
    }

    def paramTargetType = project.findProperty( 'type' )
    if ( project.hasProperty( 'type' ) )
    {
        ext.targetType = TargetType.from( paramTargetType as String )
        if ( ext.targetType == null )
        {
            throw new GradleException( 'Build target type not supported: ' + paramTargetType )
        }
    }
    else
    {
        ext.targetType = TargetType.GENERIC
    }

    println "Build target type: ${ext.targetType}"

    return ext.targetType
}

def isGenericBuild()
{
    return getTargetType() == TargetType.GENERIC
}

def isSdk()
{
    return getTargetType() == TargetType.SDK
}

ext {
    targetOS = null
    targetType = null
    getTargetOS = this.&getTargetOS
    getTargetType = this.&getTargetType
    isGenericBuild = this.&isGenericBuild
    isSdk = this.&isSdk
}