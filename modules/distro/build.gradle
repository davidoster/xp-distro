plugins {
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.0.1'
    id 'de.undercouch.download' version '3.4.3'
}

apply from: 'jdk.gradle'

configurations {
    app
    distro
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    app "${group}:app-main:${vMainApp}@jar"
    app "${group}:app-standardidprovider:${vStdIdProvider}@jar"
    app "${group}:app-applications:${vApplicationsApp}@jar"
    app "${group}:app-users:${vUsersApp}@jar"
    distro( "${group}:runtime:${vXpRuntime}@zip" )
}

ext {
    installDir = "$buildDir/install"
    archiveBase = targetArtifactId() + "-$version"
    appLevel = 40
    downloadJdkDir = "$buildDir/jdk"
}

task downloadJdk( type: Download ) {
    description = 'Download JDK.'
    group = 'Dist'

    onlyIf {
        !isGenericBuild()
    }

    dest "$downloadJdkDir/"
    overwrite false
    onlyIfModified true

    doFirst {
        mkdir dest
        src getJdkDownloadUrl()
    }

    doLast {
        tasks.unpackJdk.configure {
            def jdkPackageFile = getJdkPackageFile()
            if ( jdkPackageFile.endsWith( '.zip' ) )
            {
                def zipFile = file( "$downloadJdkDir/$jdkPackageFile" )
                from zipTree( zipFile )
            }
            else if ( jdkPackageFile.endsWith( '.tar.gz' ) )
            {
                def tarFile = resources.gzip( file( "$downloadJdkDir/$jdkPackageFile" ) )
                from tarTree( tarFile )
            }
            else
            {
                throw new GradleException( "Unable to unpack JDK: $jdkPackageFile" )
            }
        }
    }
}

task unpackJdk( type: Copy, dependsOn: downloadJdk ) {
    description = 'Unpack JDK.'
    group = 'Dist'

    onlyIf {
        !isGenericBuild()
    }

    doFirst {
        delete file( "$installDir/jdk/" ).listFiles()
    }

    def outputDir = file( "$installDir/jdk/" )
    into outputDir
}

task jdk( dependsOn: unpackJdk ) {
    description = 'Add JDK to distribution.'
    group = 'Dist'

    onlyIf {
        !isGenericBuild()
    }

    doLast {
        def targetDir = "$installDir/jdk/"
        def jdkDirTempFiles = file( targetDir ).listFiles()
        def jdkHome = findJdkHome( file( targetDir ) )

        jdkHome.traverse( [maxDepth: 0] ) {
            ant.move file: it, todir: targetDir
        }

        jdkDirTempFiles.each { File file -> delete( file )
        }
    }
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into installDir
}

task copyResources( type: Copy, dependsOn: unpackDistro ) {
    destinationDir = file( installDir )
    from( 'src' )

    if ( isGenericBuild() )
    {
        exclude 'bin/setenv.bat'
        exclude 'bin/setenv.sh'
    }
}

task copyApps( type: Copy, dependsOn: copyResources ) {
    from( configurations.app )
    into "$installDir/system/$appLevel"
}

task copyDist( dependsOn: ['copyApps', 'copyResources'] )

task distZip( type: Zip, dependsOn: [copyDist, jdk] ) {
    description = 'Build full distribution zip.'
    group = 'Dist'
    baseName = targetArtifactId()
    from installDir
    into archiveBase
}

task distTar( type: Tar, dependsOn: [copyDist] ) {
    description = 'Build full distribution tar.'
    group = 'Dist'
    baseName = targetArtifactId()
    compression = Compression.GZIP
    extension = 'tar.gz'
    into archiveBase

    from( installDir ) {

        exclude ('**/bin/*.sh')

    }

    from ( installDir ) {

        include ('**/bin/*.sh')

        fileMode 0755
    }
}

task unstableZip( type: Zip, dependsOn: copyDist ) {
    description = 'Build full distribution zip.'
    group = 'Dist'
    baseName = targetArtifactId()
    from installDir
    into archiveBase
}

build.dependsOn distTar

publishing {
    publications {
        mavenJava( MavenPublication ) {
            artifactId targetArtifactId()
            artifact distZip
        }
        if ( isUnstableBuild() )
        {
            mavenUnstable( MavenPublication ) {
                artifactId targetArtifactId()
                version = 'unstable'
                artifact unstableZip
            }
        }
    }
}
